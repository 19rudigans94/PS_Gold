generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-1.1.x", "linux-arm64-openssl-1.1.x"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Game {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  price       Float
  genre       String
  platform    String    @default("unknown")
  publisher   String
  imageUrl    String?
  status      String    @default("active")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  gameKeys    GameKey[]
  orderGames  OrderGame[]
}

model GameKey {
  id                  Int       @id @default(autoincrement())
  game                Game      @relation(fields: [gameId], references: [id])
  gameId              Int
  password            String
  status              String    @default("available")
  buyer               User?     @relation("BoughtKeys", fields: [buyerId], references: [id])
  buyerId             Int?
  reservedBy          User?     @relation("ReservedKeys", fields: [reservedById], references: [id])
  reservedById        Int?
  reservedAt          DateTime?
  reservationExpires  DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model User {
  id              Int            @id @default(autoincrement())
  email           String         @unique
  password        String
  name            String?
  role            String         @default("user")
  status          String         @default("active")
  avatar          String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  boughtKeys      GameKey[]      @relation("BoughtKeys")
  reservedKeys    GameKey[]      @relation("ReservedKeys")
  orders          Order[]
  refreshTokens   RefreshToken[]
}

model Settings {
  id              Int       @id @default(autoincrement())
  key             String    @unique
  value           String
  description     String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Order {
  id              Int         @id @default(autoincrement())
  user            User        @relation(fields: [userId], references: [id])
  userId          Int
  status          String      @default("pending")
  totalAmount     Float
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  payment         Payment?
  games           OrderGame[]
}

model OrderGame {
  id              Int       @id @default(autoincrement())
  order           Order     @relation(fields: [orderId], references: [id])
  orderId         Int
  game            Game      @relation(fields: [gameId], references: [id])
  gameId          Int
  quantity        Int       @default(1)
  price           Float
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Payment {
  id              Int       @id @default(autoincrement())
  order           Order     @relation(fields: [orderId], references: [id])
  orderId         Int       @unique
  amount          Float
  status          String    @default("pending")
  paymentMethod   String?
  transactionId   String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}